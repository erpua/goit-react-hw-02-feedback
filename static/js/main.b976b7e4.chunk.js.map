{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","Notification","msg","App","state","handleButtonClick","name","setState","prevState","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","Math","round","this","amount","percentageOfPositiveFeedbacks","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAwBeA,EArBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAEEC,KAAK,SACLC,QAAS,kBAAMJ,EAAgBE,IAHjC,SAKGA,GAJIA,SCMAG,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCyBUC,EA5BI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,oCACE,4BACE,0CAAaJ,OAEf,4BACE,6CAAgBC,OAElB,4BACE,yCAAYC,OAEd,4BACE,2CAAcC,OAEhB,4BACE,uDAA0BC,EAA1B,cCTSC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OAAa,4BAAIA,KC4DvBC,E,4MAtDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,kBAAoB,SAAAC,GAClB,EAAKC,UAAS,SAAAC,GACZ,OAAO,eACJF,EAAOE,EAAUF,GAAQ,O,EAKhCG,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKP,OAAOQ,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,I,EAGvEC,gCAAkC,WAAO,IAC/BnB,EAAS,EAAKQ,MAAdR,KACR,OAAOoB,KAAKC,MAAc,IAAPrB,EAAc,EAAKa,uB,4CAGxC,WAAU,IAAD,EACwBS,KAAKd,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBqB,EAASD,KAAKT,qBACdW,EAAgCF,KAAKH,kCAE3C,OACE,qCACE,cAAC,EAAD,CAAStB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEP,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiB+B,KAAKb,sBAG1B,cAAC,EAAD,CAASZ,MAAM,aAAf,SACG0B,EAAS,EACR,cAAC,EAAD,CACEvB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOoB,EACPnB,mBAAoBoB,IAGtB,cAAC,EAAD,CAAclB,IAAI,+B,GA/CZmB,a,MCHlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b976b7e4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <>\n      {options.map(option => (\n        <button\n          key={option}\n          type=\"button\"\n          onClick={() => onLeaveFeedback(option)}\n        >\n          {option}\n        </button>\n      ))}\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <section>\n    <p>\n      <span>Good: {good}</span>\n    </p>\n    <p>\n      <span>Neutral: {neutral}</span>\n    </p>\n    <p>\n      <span>Bad: {bad}</span>\n    </p>\n    <p>\n      <span>Total: {total}</span>\n    </p>\n    <p>\n      <span>Positive feedback: {positivePercentage} %</span>\n    </p>\n  </section>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ msg }) => <p>{msg}</p>;\n\nNotification.propTypes = {\n  msg: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\n\n/* Components */\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleButtonClick = name => {\n    this.setState(prevState => {\n      return {\n        [name]: prevState[name] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, value) => acc + value, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return Math.round((good * 100) / this.countTotalFeedback());\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const amount = this.countTotalFeedback();\n    const percentageOfPositiveFeedbacks = this.countPositiveFeedbackPercentage();\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={this.handleButtonClick}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {amount > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={amount}\n              positivePercentage={percentageOfPositiveFeedbacks}\n            />\n          ) : (\n            <Notification msg=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}